package com.practice.problems;

import java.util.ArrayList;
import java.util.List;
import java.util.function.Predicate;
import java.util.stream.Collectors;
import java.util.stream.Stream;

public class StreamAPIProblems {

	public static void main(String[] args) {
		
		List<Product> productsList = new ArrayList<Product>();
        productsList.add(new Product(1,"HP Laptop",25000f));  
        productsList.add(new Product(2,"Dell Laptop",30000f));  
        productsList.add(new Product(3,"Lenevo Laptop",28000f));  
        productsList.add(new Product(4,"Sony Laptop",28000f));  
        productsList.add(new Product(5,"Apple Laptop",90000f));
		
        //filter
		System.out.println(Stream.of(1, 2, 3, 4, 5, 6, 7, 8, 9, 10).filter(x -> x>=2 && x<=5).collect(Collectors.toList()));
		
		//filter with Predicate
		Predicate<Integer> predicate = x -> { return x>=2 && x<=5;};
		System.out.println(Stream.of(1, 2, 3, 4, 5, 6, 7, 8, 9, 10).filter(x -> predicate.test(x)).collect(Collectors.toList()));
		
		//forEach
		Emp emp = new Emp();
		Stream.of(1, 2, 3, 4).forEach(x -> emp.test(x));
		
		//filtering data and collecting data in list
		System.out.println(productsList.stream().filter(product -> product.price > 30000)
												.map(product -> product.price)
												.collect(Collectors.toList()));
		
		//forEach on filtered data
		productsList.stream().filter(product -> product.price == 30000)
												.forEach(product -> System.out.println(product.name));
		
		//reduce data to get sum -> first mapped only price to create new stream to pass to reduce function
		System.out.println(productsList.stream().map(product -> product.price)
												.reduce(0.0f, (sum, price) -> sum + price));
		
		//Sum by using Collectors Methods
		System.out.println(productsList.stream().collect(Collectors.summingDouble(product -> product.price)));
		
		
	}

}

class Emp {
	void test(int x) {
		System.out.println("from employee test" + x);
	}
}

class Product{  
    int id;  
    String name;  
    float price;  
    public Product(int id, String name, float price) {  
        this.id = id;  
        this.name = name;  
        this.price = price;  
    }  
} 
